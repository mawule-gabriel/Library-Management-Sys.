package Controller.Views;

import Entity.Staff;
import Service.StaffService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.net.URL;
import java.time.LocalDate;
import java.util.ResourceBundle;

public class StaffViewController implements Initializable {
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private ComboBox<String> roleComboBox;
    @FXML private TextField emailField;
    @FXML private TextField phoneField;
    @FXML private DatePicker hireDatePicker;
    @FXML private TextField searchField;

    @FXML private TableView<Staff> staffTable;
    @FXML private TableColumn<Staff, Integer> idColumn;
    @FXML private TableColumn<Staff, String> firstNameColumn;
    @FXML private TableColumn<Staff, String> lastNameColumn;
    @FXML private TableColumn<Staff, String> roleColumn;
    @FXML private TableColumn<Staff, String> emailColumn;
    @FXML private TableColumn<Staff, String> phoneColumn;
    @FXML private TableColumn<Staff, LocalDate> hireDateColumn;

    private final StaffService staffService = new StaffService();
    private final ObservableList<Staff> staffList = FXCollections.observableArrayList();

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // Initialize role combo box
        roleComboBox.setItems(FXCollections.observableArrayList(
                "Librarian", "Assistant Librarian", "Administrator"
        ));

        // Initialize table columns
        idColumn.setCellValueFactory(new PropertyValueFactory<>("staffId"));
        firstNameColumn.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        lastNameColumn.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        roleColumn.setCellValueFactory(new PropertyValueFactory<>("role"));
        emailColumn.setCellValueFactory(new PropertyValueFactory<>("email"));
        phoneColumn.setCellValueFactory(new PropertyValueFactory<>("phoneNumber"));
        hireDateColumn.setCellValueFactory(new PropertyValueFactory<>("hireDate"));

        // Setup search functionality
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            filterStaff(newValue);
        });

        // Load initial data
        refreshTable();
    }

    @FXML
    private void handleAddStaff() {
        try {
            Staff staff = new Staff(
                    0, // ID will be generated by database
                    firstNameField.getText(),
                    lastNameField.getText(),
                    roleComboBox.getValue(),
                    emailField.getText(),
                    phoneField.getText(),
                    hireDatePicker.getValue()
            );

            staffService.addStaff(staff);
            refreshTable();
            clearFields();
            showAlert(Alert.AlertType.INFORMATION, "Success", "Staff member added successfully!", "Failed to navigate to the Dashboard.");
        } catch (IllegalArgumentException e) {
            showAlert(Alert.AlertType.ERROR, "Error", e.getMessage(), "Failed to navigate to the Dashboard.");
        }
    }

    @FXML
    private void handleClear() {
        clearFields();
    }

    private void filterStaff(String searchText) {
        ObservableList<Staff> filteredList = FXCollections.observableArrayList();
        if (searchText == null || searchText.isEmpty()) {
            staffTable.setItems(staffList);
        } else {
            String lowerCaseFilter = searchText.toLowerCase();
            staffList.forEach(staff -> {
                if (staff.getFirstName().toLowerCase().contains(lowerCaseFilter) ||
                        staff.getLastName().toLowerCase().contains(lowerCaseFilter) ||
                        staff.getEmail().toLowerCase().contains(lowerCaseFilter)) {
                    filteredList.add(staff);
                }
            });
            staffTable.setItems(filteredList);
        }
    }

    private void clearFields() {
        firstNameField.clear();
        lastNameField.clear();
        roleComboBox.setValue(null);
        emailField.clear();
        phoneField.clear();
        hireDatePicker.setValue(null);
    }

    private void refreshTable() {
        staffList.clear();
        staffList.addAll(staffService.getAllStaff());
        staffTable.setItems(staffList);
    }

    private void showAlert(Alert.AlertType type, String title, String content, String s) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    // New method to handle navigation back to the Dashboard
    @FXML
    public void handleBackToDashboard() {
        try {
            // Get the current stage (window)
            Stage stage = (Stage) firstNameField.getScene().getWindow();

            // Load the Dashboard view
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/org/example/librarymanagementsys/DashboardView.fxml"));
            Parent root = loader.load();

            // Create a new scene and set it on the stage
            Scene scene = new Scene(root);
            scene.getStylesheets().add(getClass().getResource("/org/example/librarymanagementsys/dashboard.css").toExternalForm());

            stage.setScene(scene);  // Switch to the new scene
            stage.show();  // Display the new scene

        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Navigation Error", "Failed to navigate to the Dashboard.");
            e.printStackTrace();
        }
    }
}
